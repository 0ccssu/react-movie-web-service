{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","idx","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","componentDidMount","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTA+BeA,MA1Bf,YAA2D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC9C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,qBAAIK,UAAU,gBAAd,cAAgCD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACvC,oBAAcL,UAAU,eAAxB,SAAwCI,GAA/BC,SAGb,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBC2CDC,G,kNAlDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAOAC,IAAMC,IAAI,4DAPV,gBAKEJ,EALF,EAIRK,KACEA,KAAQL,OAGZM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IATzB,2C,EAYZU,kBAAoB,WAClB,EAAKR,a,4CAGP,WAAU,IAAD,EACuBS,KAAKZ,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAEnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAkB,GAEV,OADAL,QAAQC,IAAII,GACL,cAAC,EAAD,CACO3B,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,QANTsB,EAAM3B,e,GApCrB6B,IAAMC,YCIxBC,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA4BC,SAASC,eAAe,W","file":"static/js/main.19f30ed0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// state를 필요로 하지 않을때는 class로 정의하지 않아도 된다\r\nfunction Movie({id, year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\"> {genres.map((genre, idx) => \r\n                    <li key={idx} className=\"genres__name\">{genre}</li>\r\n                )}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// validation\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// Function -> Class component 로 변환(React.Component를 상속)\n// Component의 render 메서드와 state를 상속\nclass App extends React.Component {\n\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async () => {\n    // axios 라이브러리를 사용하여 영화리스트를 get 한다\n    // async와 await 힌트를 사용하여 비동기처리를 한다.(둘은 같이 가야함)\n    const { \n      data: { \n        data: { movies } \n      } \n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log(movies);\n    this.setState({ movies, isLoading: false });\n  }\n\n  componentDidMount = () => {\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">Loading...</span>\n        </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => {\n              console.log(movie);\n              return <Movie key={movie.id}\n                            id={movie.id} \n                            year={movie.year} \n                            title={movie.title} \n                            summary={movie.summary} \n                            poster={movie.medium_cover_image}\n                            genres={movie.genres}\n                      />\n            })}\n          </div>\n        )}\n      </section>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import Potato from './Potato'; \r\n\r\n/**\r\n * <p>\r\n *  ReactDOM.render() 합수 내부의 <App/> 태그는 Component 라 불림 (모듈화된 element)\r\n *  Component는 각각의 자바스크립트 함수로 정의돼 있으며 HTML을 반환.\r\n * </p>\r\n */\r\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root')); // 타겟 id를 가진 태그\r\n\r\n/**\r\n * <p>\r\n *  최초 실행되는 React application은 한번에 하나의 컴퍼넌트만을 렌더링 해야하기 때문에\r\n *  다건의 렌더링이 발생 할 경우 마지막에 실행된 렌더 함수만을 실행하게 된다.\r\n *  다중컴퍼넌트가 필요하다면 컴퍼넌트간 계층을 만들어서 렌더링을 수행하라. \r\n *  예) App.js 내부에 계층적으로 만든 리액트 컴퍼넌트들을 렌더\r\n * </p>\r\n */\r\n// ReactDOM.render(<React.StrictMode><Potato /></React.StrictMode>, document.getElementById('root'));\r\n"],"sourceRoot":""}